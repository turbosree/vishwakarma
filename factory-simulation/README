// ------------------------------------------------------------------------------------------
/// \file                  README for a Factory simulation problem
///                        Also included HOWTO to get started with project and build steps
/// \author                Sreejith.Naarakathil@gmail.com
/// \date                  23/9/2021
// ------------------------------------------------------------------------------------------

1. Problem Statement
--------------------

There is a factory production line around a single conveyor belt.  

Components (of type A, B & C) come onto the start of the belt at random 
intervals; workers must take an A, and one of either B or C from the 
belt as they come past, and combine them to make a finished product
P (an A + a B) or Q (an A + a C).

The belt is divided into fixed-size slots; each slot can hold only one 
component or one finished product.  There are a number of worker 
stations on either side of the belt, spaced to match the size of the 
slots on the belt, like this (fixed-width font ASCII-art picture):
       v   v   v   v   v          workers
     ---------------------
  -> | A |   | B | C | P | ->     conveyor belt
     ---------------------
       ^   ^   ^   ^   ^          workers

In each unit of time, the belt moves forwards one position, and there 
is time for a worker on one side of each slot to EITHER take an item 
from the slot or place an item into the slot.  
The worker opposite them can't touch the same slot while they do this.
(So you can't have one worker picking something from a slot while 
their counterpart puts something down in the same place).

Once a worker has collected the two components needed, they can 
begin assembling the finished product.  This takes an amount of time, 
so they will only be ready to place the assembled product back on the 
belt on the fourth subsequent slot.  While they are assembling the 
product, they can't touch the conveyor belt.  Workers can only hold 
two items (component or product) at a time: one in each hand.

Create a simulation of this, with three pairs of workers.  At each 
time interval, the slot at the start of the conveyor belt should have 
the probability of containing nothing (1/5), a component A (2/5),
a component B (1/5) or a component C (1/5).

Run the simulation for 100 steps, and compute how many finished 
products come off the production line, and how many components of each 
type go through the production line without being picked up by any 
workers.

A few pointers:
 - The code does not have to be 'production quality', but
   we will be looking for evidence that it's written to be
   somewhat flexible, and that a third party would be able to
   read and maintain it. 
 - Be sure to state (or comment) your assumptions.
 - During an interview, we might ask about the effect of changing certain
   aspects of the simulation (e.g. the length of the conveyor belt).
 - Some flexibility in the solution is useful, but we are also looking 
   for a sensible decision on where this adds too much complexity. 

2. Solution approach
--------------------

The system is modeled using descrete timer events generated by a real-time thread using Linux Kernel real-time extensions. The simulation uses a pipeline approach to do the assembly line stages and stote the state of each stage every cycle of the simulation run. Uses a separate thread to output the results without impacting the similation thread. Simulation uses 2 additional slots on the conveyor, one at the beginning as a loading bay and another at the end as an inspection bay. Item coming out of the last stage of simulation is discarded after storing the state.

This simulation currently only works on Linux platform. The Linux real-time approach is taken from my own article in the "Linux Gazette" published online here: https://linuxgazette.net/118/sreejith.html


3. How to build the Simulation from source?
-------------------------------------------
System:
Linux 4.10.0-38-generic #42~16.04.1-Ubuntu SMP Tue Oct 10 16:32:20 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux

g++ version:
g++ (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609

From a linux console, go to the source code folder and execute command: make
Use 'make clean' to clean the root folder of source code

To execute the Simulation with out batch randomization: ./RunSimulation 1000000 3 100 0 > result_without_batch_randomization.txt
To execute the Simulation with batch randomization:     ./RunSimulation 1000000 3 100 1 > result_with_batch_randomization.txt

Sample test results in the root folder of the source: result_without_batch_randomization.txt, result_with_batch_randomization.txt

4. Result
---------

Case-1: Simulation with out batch randomization
-----------------------------------------------
Running Simulation with 5 arguments: ./RunSimulation 1000000 3 100 0 
Results:
Simulation unit of time (cycle) in us: 1000000
Number of pairs of workers in Simulation: 3
Number of steps to run Simulation: 100
Randomize components in batch: 0

Simulation cycle:     99
Current batch:        | C | -->
Conveyor belt status: | C | Q |   |   |   |
Work station status:  [   ][   ]---[   ][   ]---[ A ][ C ]---[   ][   ]---[ A ][   ]---[ A ][ B ]---[   ][   ]---[   ][   ]---[   ][   ]---[   ][   ]---

Uptime (secs): 99    TypeA: 0    TypeB: 0    TypeC: 0    TypeP: 19    TypeQ: 17    Inventory: 320    Throughput: 36


Number of items created: 616
Number of items destroyed: 289


How many finished products come off the production line: 36 (Please see 'Throughput' above.)
How many components of each type go through the production line without being picked up by any workers:
TypeA: 0    TypeB: 0    TypeC: 0
At the end of 100th simulation cycle the following items are with the workers at their respective work stations or on the conveyor belt:
Slot1-Station-1: A,C
Slot2-Station-1: A
Slot2-Station-2: A,B
Slot0(Loading bay at the beginning of conveyor belt): C
Slot1: Q

Test: From real world experience, we can say that number of items fed into the assembly line should be equal to the total number of items in processing and items used in total finished products. 
289 + 2(Slot1) + 2(slot-2 station-2) + 1(slot-2 station-1) + 2(slot-1 station-1) + 320 = 616

Case-2: Simulation with batch randomization
-------------------------------------------
Running Simulation with 5 arguments: ./RunSimulation 1000000 3 100 1 
Results:
Simulation unit of time (cycle) in us: 1000000
Number of pairs of workers in Simulation: 3
Number of steps to run Simulation: 100
Randomize components in batch: 1

Simulation cycle:     99
Current batch:        | B | -->
Conveyor belt status: | B |   |   | Q | P |
Work station status:  [   ][   ]---[   ][   ]---[ A ][ C ]---[ A ][   ]---[   ][ C ]---[   ][   ]---[   ][   ]---[ A ][   ]---[   ][   ]---[   ][   ]---

Uptime (secs): 99    TypeA: 0    TypeB: 0    TypeC: 0    TypeP: 19    TypeQ: 17    Inventory: 320    Throughput: 36


Number of items created: 616
Number of items destroyed: 289


How many finished products come off the production line: 36 (Please see 'Throughput' above.)
How many components of each type go through the production line without being picked up by any workers:
TypeA: 0    TypeB: 0    TypeC: 0
At the end of 100th simulation cycle the following items are with the workers at their respective work stations or on the conveyor belt:
Slot1-Station-1: A,C
Slot1-Station-2: A
Slot2-Station-1: C
Slot3-Station-2: A
Slot0(Loading bay at the beginning of conveyor belt): B
Slot3: Q
Slot4: P

Test: From real world experience, we can say that number of items fed into the assembly line should be equal to the total number of items in processing and items used in total finished products. 
289 + 2(Slot3) + 1(slot-3 station-2) + 1(slot-2 station-1) + 1(slot-1 station-2) + 2(slot-1 station-1) + 320 = 616

5. Running in debugger:
-----------------------
gdb -i=mi --args RunSimulation 1000000 3 100 0

